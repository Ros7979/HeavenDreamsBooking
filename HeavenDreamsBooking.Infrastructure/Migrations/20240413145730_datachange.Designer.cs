// <auto-generated />
using System;
using HeavenDreamsBooking.Infrastrucure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HeavenDreamsBooking.Infrastructure.Migrations
{
    [DbContext(typeof(HeavenDbContext))]
    [Migration("20240413145730_datachange")]
    partial class datachange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.DeparturedFlight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClassOfRes")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("DateOfJorney")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfRes")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("Fare")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("FlightDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("FltNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("PassengerDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("TicketConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PassengerDetailsId");

                    b.ToTable("DeparturedFlights");
                });

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("DiscountGiven")
                        .HasColumnType("float");

                    b.Property<decimal>("FareLimit")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("TotalFlightsLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscountGiven = 8.0,
                            FareLimit = 5500.00m,
                            TotalFlightsLimit = 10
                        });
                });

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.FlightCanseled", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CanselationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfJorney")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FltNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<float>("Refund")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FlightsCanseled");
                });

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.FlightDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AircraftType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ArrTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("FareBusines")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("FareEconomy")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("FltNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Flight image url");

                    b.Property<DateTime>("LaunchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeatsBusines")
                        .HasColumnType("int");

                    b.Property<int>("SeatsEconomy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FlightDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AircraftType = "Airbus a380",
                            ArrTime = new DateTime(2024, 8, 24, 10, 35, 0, 0, DateTimeKind.Unspecified),
                            DepTime = new DateTime(2024, 8, 23, 14, 35, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Барселона",
                            FareBusines = 180.00m,
                            FareEconomy = 125.40m,
                            FltNo = "SOF-BCN",
                            From = "София",
                            ImageUrl = "https://wallpaperaccess.com/full/1322174.jpg",
                            LaunchDate = new DateTime(2024, 4, 13, 17, 57, 29, 654, DateTimeKind.Local).AddTicks(8757),
                            SeatsBusines = 3,
                            SeatsEconomy = 5
                        },
                        new
                        {
                            Id = 2,
                            AircraftType = "Airbus a320",
                            ArrTime = new DateTime(2024, 6, 14, 16, 22, 0, 0, DateTimeKind.Unspecified),
                            DepTime = new DateTime(2024, 6, 14, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Ларнака",
                            FareBusines = 280.00m,
                            FareEconomy = 200.00m,
                            FltNo = "SOF-LCA",
                            From = "София",
                            ImageUrl = "https://www.goatsontheroad.com/wp-content/uploads/2022/11/Malindi-Beach-in-Limassol.jpeg",
                            LaunchDate = new DateTime(2024, 4, 13, 17, 57, 29, 654, DateTimeKind.Local).AddTicks(8791),
                            SeatsBusines = 4,
                            SeatsEconomy = 4
                        },
                        new
                        {
                            Id = 3,
                            AircraftType = "Boeing 777",
                            ArrTime = new DateTime(2024, 10, 10, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            DepTime = new DateTime(2024, 10, 10, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Атина",
                            FareBusines = 500.00m,
                            FareEconomy = 314.00m,
                            FltNo = "SOF-ATH",
                            From = "София",
                            ImageUrl = "https://th.bing.com/th/id/OIP.gtnO8Z0v_QVMykrG4JUJygHaE8?rs=1&pid=ImgDetMain",
                            LaunchDate = new DateTime(2024, 4, 13, 17, 57, 29, 654, DateTimeKind.Local).AddTicks(8794),
                            SeatsBusines = 8,
                            SeatsEconomy = 10
                        },
                        new
                        {
                            Id = 4,
                            AircraftType = "Boeing 777",
                            ArrTime = new DateTime(2024, 10, 11, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            DepTime = new DateTime(2024, 10, 11, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Destination = "София",
                            FareBusines = 500.00m,
                            FareEconomy = 314.00m,
                            FltNo = "ATH-SOF",
                            From = "Атина",
                            ImageUrl = "https://th.bing.com/th/id/OIP.gtnO8Z0v_QVMykrG4JUJygHaE8?rs=1&pid=ImgDetMain",
                            LaunchDate = new DateTime(2024, 4, 13, 17, 57, 29, 654, DateTimeKind.Local).AddTicks(8797),
                            SeatsBusines = 8,
                            SeatsEconomy = 10
                        });
                });

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.FlightStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfJorney")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlightDetailId")
                        .HasColumnType("int");

                    b.Property<string>("FltNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StatusBusiness")
                        .HasColumnType("int");

                    b.Property<int>("StatusEconomy")
                        .HasColumnType("int");

                    b.Property<int>("WaitListedBusiness")
                        .HasColumnType("int");

                    b.Property<int>("WaitListedEconomy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightDetailId")
                        .IsUnique();

                    b.ToTable("FlightStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfJorney = new DateTime(2024, 8, 23, 14, 35, 0, 0, DateTimeKind.Unspecified),
                            FlightDetailId = 1,
                            FltNo = "SOF-BCN",
                            StatusBusiness = 5,
                            StatusEconomy = 3,
                            WaitListedBusiness = 0,
                            WaitListedEconomy = 0
                        },
                        new
                        {
                            Id = 2,
                            DateOfJorney = new DateTime(2024, 6, 14, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            FlightDetailId = 2,
                            FltNo = "SOF-LCA",
                            StatusBusiness = 4,
                            StatusEconomy = 4,
                            WaitListedBusiness = 0,
                            WaitListedEconomy = 0
                        },
                        new
                        {
                            Id = 3,
                            DateOfJorney = new DateTime(2024, 10, 10, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            FlightDetailId = 3,
                            FltNo = "SOF-ATH",
                            StatusBusiness = 10,
                            StatusEconomy = 8,
                            WaitListedBusiness = 0,
                            WaitListedEconomy = 0
                        },
                        new
                        {
                            Id = 4,
                            DateOfJorney = new DateTime(2024, 10, 11, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            FlightDetailId = 4,
                            FltNo = "ATH-SOF",
                            StatusBusiness = 10,
                            StatusEconomy = 8,
                            WaitListedBusiness = 0,
                            WaitListedEconomy = 0
                        });
                });

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.PassengerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("FareCollected")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("TotalTimesFlown")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PassengerDetails");
                });

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.RegularFlier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("PassengerDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PassengerDetailId")
                        .IsUnique();

                    b.ToTable("RegularFliers");
                });

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClassOfRes")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("DateOfJorney")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfRes")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("Fare")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("FlightDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("FltNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("TicketConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FlightDetailsId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1a4b4694-c3d6-4085-8202-56758d2f2925",
                            ConcurrencyStamp = "0473f5e4-167f-4f30-9d77-215b0ade792a",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "bsmrol45-b34a-s67r-m123-b1s2m3r5o7l9",
                            ConcurrencyStamp = "f85b3e80-5509-4ebd-a91a-8d1d9b4d9459",
                            Name = "BusinessManager",
                            NormalizedName = "BUSINESSMANAGER"
                        },
                        new
                        {
                            Id = "e3pu12ro-em45-u1l3-r864-e3m2p1u8r6o2",
                            ConcurrencyStamp = "6f53abae-076f-4dff-b827-840c12afda75",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "usle1234-45er-o1l3-r8le-u4s2e1e876ro",
                            ConcurrencyStamp = "3a24a9b1-835c-4e3c-8f65-00f3a219dfed",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bsm12345-b345-s678-m123-b1s2m3456789",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cf0cc5a-d921-4588-96e9-31257ad04d20",
                            Email = "isbusinessmanager@mail.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "isbusinessmanager@mail.bg",
                            NormalizedUserName = "isbusinessmanager@mail.bg",
                            PasswordHash = "AQAAAAEAACcQAAAAEMrip0ShbXE+2NFq+0amsIOsVq6LxmwqfMp0sJwZLRKekgyiNDDW2d69HeOZMB2diQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "265b4c04-e6d4-410d-8eba-bc6ee8cfc3ef",
                            TwoFactorEnabled = false,
                            UserName = "isbusinessmanager@mail.bg"
                        },
                        new
                        {
                            Id = "adm12345-a345-d678-m321-a3d2m1987654",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2f7157f-68bb-488e-a4e5-27617643345f",
                            Email = "pvadminuser@mail.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "pvadminuser@mail.bg",
                            NormalizedUserName = "pvadminuser@mail.bg",
                            PasswordHash = "AQAAAAEAACcQAAAAEBAoaNsLuFNl2rBES9G8qO7V8kLKZCB9fb1NBWLuEXFw148FkeUber6EG4BPBZiNdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83d4c6fe-839a-493a-96a1-7751496f8acb",
                            TwoFactorEnabled = false,
                            UserName = "pvadminuser@mail.bg"
                        },
                        new
                        {
                            Id = "empu1234-em45-u123-r864-e3m2p1u87652",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64f36f17-6c49-43a4-8061-ae53a3ebe6a5",
                            Email = "spemployuser@mail.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "spemployuser@mail.bg",
                            NormalizedUserName = "spemployuser@mail.bg",
                            PasswordHash = "AQAAAAEAACcQAAAAEN+qZ+F5c1feMHesH5Q1c+7o4cQy8jy7k5Hx1ADL0Fxt8UE+KUSl+a+smHsZNH+5ig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1668753-bf8f-43dd-b2b1-99958b703f4f",
                            TwoFactorEnabled = false,
                            UserName = "spemployuser@mail.bg"
                        },
                        new
                        {
                            Id = "user1234-45er-u123-r86s-u3s2e1e87614",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7ebf719-3f54-4adf-a8fc-06e8c82e6a6f",
                            Email = "useruser@mail.bg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "useruser@mail.bg",
                            NormalizedUserName = "useruser@mail.bg",
                            PasswordHash = "AQAAAAEAACcQAAAAEPhqWRhIKvGNp2JplNuKneWC9/Rmmkm6ywlTGvKjZ2ToTv7fSHquxBQbNtvbIJvxMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7bb4b8f6-9f82-47d1-a64f-cd26bb75a0c4",
                            TwoFactorEnabled = false,
                            UserName = "useruser@mail.bg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "bsm12345-b345-s678-m123-b1s2m3456789",
                            RoleId = "bsmrol45-b34a-s67r-m123-b1s2m3r5o7l9"
                        },
                        new
                        {
                            UserId = "adm12345-a345-d678-m321-a3d2m1987654",
                            RoleId = "1a4b4694-c3d6-4085-8202-56758d2f2925"
                        },
                        new
                        {
                            UserId = "empu1234-em45-u123-r864-e3m2p1u87652",
                            RoleId = "e3pu12ro-em45-u1l3-r864-e3m2p1u8r6o2"
                        },
                        new
                        {
                            UserId = "user1234-45er-u123-r86s-u3s2e1e87614",
                            RoleId = "usle1234-45er-o1l3-r8le-u4s2e1e876ro"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.DeparturedFlight", b =>
                {
                    b.HasOne("HeavenDreamsBooking.Infrastructure.Data.Models.PassengerDetail", "PassengerDetail")
                        .WithMany("DeparturedFlights")
                        .HasForeignKey("PassengerDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PassengerDetail");
                });

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.FlightCanseled", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.FlightStatus", b =>
                {
                    b.HasOne("HeavenDreamsBooking.Infrastructure.Data.Models.FlightDetail", "FlightDetail")
                        .WithOne("FlightStatus")
                        .HasForeignKey("HeavenDreamsBooking.Infrastructure.Data.Models.FlightStatus", "FlightDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightDetail");
                });

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.RegularFlier", b =>
                {
                    b.HasOne("HeavenDreamsBooking.Infrastructure.Data.Models.PassengerDetail", "PassengerDetail")
                        .WithOne("RegularFlier")
                        .HasForeignKey("HeavenDreamsBooking.Infrastructure.Data.Models.RegularFlier", "PassengerDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassengerDetail");
                });

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.Reservation", b =>
                {
                    b.HasOne("HeavenDreamsBooking.Infrastructure.Data.Models.FlightDetail", "FlightDetail")
                        .WithMany("Reservations")
                        .HasForeignKey("FlightDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.FlightDetail", b =>
                {
                    b.Navigation("FlightStatus");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("HeavenDreamsBooking.Infrastructure.Data.Models.PassengerDetail", b =>
                {
                    b.Navigation("DeparturedFlights");

                    b.Navigation("RegularFlier");
                });
#pragma warning restore 612, 618
        }
    }
}
